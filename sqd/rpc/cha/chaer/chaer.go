// Code generated by goctl. DO NOT EDIT.
// Source: cha.proto

package chaer

import (
	"context"

	"YxEmr/sqd/rpc/cha/cha"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Req  = cha.Req
	Resp = cha.Resp

	Chaer interface {
		Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	}

	defaultChaer struct {
		cli zrpc.Client
	}
)

func NewChaer(cli zrpc.Client) Chaer {
	return &defaultChaer{
		cli: cli,
	}
}

func (m *defaultChaer) Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	client := cha.NewChaerClient(m.cli.Conn())
	return client.Do(ctx, in, opts...)
}
