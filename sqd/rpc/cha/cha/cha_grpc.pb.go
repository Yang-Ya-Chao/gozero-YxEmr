// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cha.proto

package cha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChaerClient is the client API for Chaer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChaerClient interface {
	Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type chaerClient struct {
	cc grpc.ClientConnInterface
}

func NewChaerClient(cc grpc.ClientConnInterface) ChaerClient {
	return &chaerClient{cc}
}

func (c *chaerClient) Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/cha.chaer/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaerServer is the server API for Chaer service.
// All implementations must embed UnimplementedChaerServer
// for forward compatibility
type ChaerServer interface {
	Do(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedChaerServer()
}

// UnimplementedChaerServer must be embedded to have forward compatible implementations.
type UnimplementedChaerServer struct {
}

func (UnimplementedChaerServer) Do(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedChaerServer) mustEmbedUnimplementedChaerServer() {}

// UnsafeChaerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaerServer will
// result in compilation errors.
type UnsafeChaerServer interface {
	mustEmbedUnimplementedChaerServer()
}

func RegisterChaerServer(s grpc.ServiceRegistrar, srv ChaerServer) {
	s.RegisterService(&Chaer_ServiceDesc, srv)
}

func _Chaer_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cha.chaer/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaerServer).Do(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Chaer_ServiceDesc is the grpc.ServiceDesc for Chaer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chaer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cha.chaer",
	HandlerType: (*ChaerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _Chaer_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cha.proto",
}
