// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: reg.proto

package reg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegerClient is the client API for Reger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegerClient interface {
	Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	Co(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type regerClient struct {
	cc grpc.ClientConnInterface
}

func NewRegerClient(cc grpc.ClientConnInterface) RegerClient {
	return &regerClient{cc}
}

func (c *regerClient) Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/reg.reger/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regerClient) Co(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/reg.reger/Co", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegerServer is the server API for Reger service.
// All implementations must embed UnimplementedRegerServer
// for forward compatibility
type RegerServer interface {
	Do(context.Context, *Req) (*Resp, error)
	Co(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedRegerServer()
}

// UnimplementedRegerServer must be embedded to have forward compatible implementations.
type UnimplementedRegerServer struct {
}

func (UnimplementedRegerServer) Do(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedRegerServer) Co(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Co not implemented")
}
func (UnimplementedRegerServer) mustEmbedUnimplementedRegerServer() {}

// UnsafeRegerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegerServer will
// result in compilation errors.
type UnsafeRegerServer interface {
	mustEmbedUnimplementedRegerServer()
}

func RegisterRegerServer(s grpc.ServiceRegistrar, srv RegerServer) {
	s.RegisterService(&Reger_ServiceDesc, srv)
}

func _Reger_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reg.reger/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegerServer).Do(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reger_Co_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegerServer).Co(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reg.reger/Co",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegerServer).Co(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Reger_ServiceDesc is the grpc.ServiceDesc for Reger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reg.reger",
	HandlerType: (*RegerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _Reger_Do_Handler,
		},
		{
			MethodName: "Co",
			Handler:    _Reger_Co_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reg.proto",
}
