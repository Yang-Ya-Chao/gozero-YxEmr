// Code generated by goctl. DO NOT EDIT.
// Source: reg.proto

package reger

import (
	"context"

	"YxEmr/sqd/rpc/reg/reg"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Req  = reg.Req
	Resp = reg.Resp

	Reger interface {
		Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
		Co(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	}

	defaultReger struct {
		cli zrpc.Client
	}
)

func NewReger(cli zrpc.Client) Reger {
	return &defaultReger{
		cli: cli,
	}
}

func (m *defaultReger) Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	client := reg.NewRegerClient(m.cli.Conn())
	return client.Do(ctx, in, opts...)
}

func (m *defaultReger) Co(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	client := reg.NewRegerClient(m.cli.Conn())
	return client.Co(ctx, in, opts...)
}
