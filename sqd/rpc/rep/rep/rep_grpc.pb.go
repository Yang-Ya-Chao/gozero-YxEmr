// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: rep.proto

package rep

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReperClient is the client API for Reper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReperClient interface {
	Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	Co(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type reperClient struct {
	cc grpc.ClientConnInterface
}

func NewReperClient(cc grpc.ClientConnInterface) ReperClient {
	return &reperClient{cc}
}

func (c *reperClient) Do(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/rep.reper/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reperClient) Co(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/rep.reper/Co", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReperServer is the server API for Reper service.
// All implementations must embed UnimplementedReperServer
// for forward compatibility
type ReperServer interface {
	Do(context.Context, *Req) (*Resp, error)
	Co(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedReperServer()
}

// UnimplementedReperServer must be embedded to have forward compatible implementations.
type UnimplementedReperServer struct {
}

func (UnimplementedReperServer) Do(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedReperServer) Co(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Co not implemented")
}
func (UnimplementedReperServer) mustEmbedUnimplementedReperServer() {}

// UnsafeReperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReperServer will
// result in compilation errors.
type UnsafeReperServer interface {
	mustEmbedUnimplementedReperServer()
}

func RegisterReperServer(s grpc.ServiceRegistrar, srv ReperServer) {
	s.RegisterService(&Reper_ServiceDesc, srv)
}

func _Reper_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReperServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rep.reper/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReperServer).Do(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reper_Co_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReperServer).Co(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rep.reper/Co",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReperServer).Co(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Reper_ServiceDesc is the grpc.ServiceDesc for Reper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rep.reper",
	HandlerType: (*ReperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _Reper_Do_Handler,
		},
		{
			MethodName: "Co",
			Handler:    _Reper_Co_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rep.proto",
}
